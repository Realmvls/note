CSDN zjiang1994的博客很有借鉴的必要啊喂！！！有空多看看啊啊啊啊！！
http://blog.csdn.net/zjiang1994/article/category/6436108


取值与赋值


从网页获取了需要的标签后，要做的就是从标签中获得需要的值了。

BS4的取值主要通过以下方法。

标签名

#获取标签名
tag.name
#对应的该变标签名为
tag.name = "你想要的标签"


属性

#获取属性
#获取属性列表
tag.attrs
#输出为一个dict key为属性，value为属性值
#例如{"class":"abc", "id":"link1"}

#获取指定属性
tag['class']
#或
tag.get('class')

#多值属性
#对于HTML中定义的一些可以包含多个值的属性（class,rev等等）
#返回值为list类型
tag['class']
#例如['top', 'box']

#为属性赋值
tag['class'] = "class1"

内容

这里用两种获取方式
.string 和 get_text()
.string 用来获取标签的内容
get_text() 用来获取标签中所有字符串包括子标签的。

#获取当前标签内容
tag.string
#返回结果的type为 <class 'bs4.element.NavigableString'>

#获取标签内所有的字符串
tag.get_text()
#返回结果的type为 <class 'str'>

#为标签内容赋值
tag.string = "str"

注意！！

在取值时我们要注意一点就是在获取标签的时候获取的是单个标签还是标签列表。
也就是find()和find_all(),select()和select_one()的区别。
当使用

find()
select_one()

时，获得的是一个标签
类型为

<class 'bs4.element.Tag'>

所以可以使用tag['class']取值

当使用

find_all()
select()

时，获得的是组标签(就算只有一个标签也是一组)
类型为

#find_all()的返回值类型
<class 'bs4.element.ResultSet'>
#select()的返回值类型
<class 'list'>

这时，我们要取值就需要先定位是list(ResultSet)中的那个标签在取值
例如tag[0]['class']


######################################################################################################################

参考链接：http://blog.csdn.net/zjiang1994/article/details/52669080
BeautifulSoup 取值
bs4主要使用find()方法和find_all()方法来搜索文档。
find()用来搜索单一数据，find_all()用来搜索多个数据

find_all()与find()

name –> tag名
string –> 内容
recursive –>是否搜索所有子孙节点 默认为true 设为false只搜索子节点

两方法用法相似这里以find_all()为例。

#搜索tag名 <title></title>
soup.find_all("title")

#关于属性
#搜索id为"link2"的标签
soup.find_all(id='link2')

#这里属性的值可以使用字符串,正则表达式 ,列表,True
soup.find_all(id=re.compile("elsie"))

#可以指定多个条件
soup.find_all(href=re.compile("elsie"), id='link1')

#对于有些不能指定的标签(data-foo)
soup.find_all(attrs={"data-foo": "value"})

#对于class -->class为python保留字使用class_
soup.find_all(class_="top")
#属性结束

#关于string(内容)
#基础 内容为'Elsie'的
soup.find_all(string="Elsie")

#内容在数组中的
soup.find_all(string=["Tillie", "Elsie", "Lacie"])

#内容匹配正则表达式的
soup.find_all(string=re.compile("Dormouse"))

#匹配函数
soup.find_all(string=is_the_only_string_within_a_tag)
#内容结束

#搜索限制
#限制搜索数量为2
soup.find_all("a", limit=2)

#只搜索直接子节点
soup.html.find_all("a", recursive=False)
#搜索限制结束

简写

soup.find_all("a")
#等价于
soup("a")

soup.title.find_all(string=True)
#等价于
soup.title(string=True)

CSS选择器

Beautiful Soup支持大部分的CSS选择器

#搜索tag为title
soup.select("title")

#通过tag标签逐层查找
soup.select("html head title")

#寻找直接子标签
soup.select("head > title")
soup.select("p > #link1")

#选择所有紧接着id为link1元素之后的class为sister的元素
soup.select("#link1 + .sister")

#选择p元素之后的每一个ul元素
soup.select("p + ul")

#同时用多种CSS选择器查询元素
soup.select("#link1,#link2")

#通过查询元素属性
soup.select('a[href="http://example.com/elsie"]')
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>]

soup.select('a[href^="http://example.com/"]')
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,
#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,
#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]

soup.select('a[href$="tillie"]')
# [<a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]

soup.select('a[href*=".com/el"]')
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>]
#通过查询元素属性结束

#通过语言查找
soup.select('p[lang|=en]')

#查找第一个元素
soup.select_one(".sister")

find_其他

find_parents() 和 find_parent()

搜索当前节点的父节点

#查找一个标签a
a = soup("a", id="link1")

#查找a的父节点中的P标签
a_string.find_parent("p")

find_next_siblings() 和 find_next_sibling()

搜索当前节点后边解析的兄弟节点
(可以理解为搜索当前标签下边的同级节点)

find_previous_siblings() 和 find_previous_sibling()

搜索当前节点前边解析的兄弟节点
(可以理解为搜索当前标签上边的同级节点)

find_all_next() 和 find_next()

对当前节点之后的节点进行迭代

find_all_previous() 和 find_previous()

对当前节点之前的节点进行迭代


##########################################################################################################################
beautiful soup解析有空格的class


用Python写一个爬虫，用BeautifulSoup解析html。
其中一个地方需要抓取下面两类标签：

<dd class="ab "   >blabla1</dd>
<dd class="ab cd" >blabla2</dd>

第一类class的值的末尾有一个空格。
第二类class的值中间有一个空格，而且开头部分和第一类相同。

在css中，class的值不应该有空格，所以第一类会忽略空格，第二类会被当做多值属性。参考官方文档多值属性。

所以在处理时也不需再考虑class值中的空格。

传入参数时用列表过滤器是最方便的，如下:

soup.find_all("dd", class_= ["ab", "cd"])