

引入sqlalchemy包

from sqlalchemy import Table,Column, String, create_engine,MetaData,text
from sqlalchemy.orm import sessionmaker,mapper
from sqlalchemy.ext.declarative import declarative_base

 

连接数据库的相关参数

db_config={
    'user':'root',
    'passwd':'',
    'host':'localhost',
    'db':'test',
    'port':'3306',
    'charset':'utf8'
}

 

生成engine

query='mysql+mysqlconnector://%s:%s@%s:%s/%s?charset=%s'%(
    db_config['user'],
    db_config['passwd'],
    db_config['host'],
    db_config['port'],
    db_config['db'],
    db_config['charset']
)
engine=create_engine(query,echo=True)

 

定义表格（必须有主键）

Base=declarative_base()
class hehe(Base):
    __tablename__='hehe'
    a=Column(String,primary_key=True)
    b=Column(String)
    def __repr__(self):
        return('<hehe(a=%s,b=%s)>'%(self.a,self.b))

 

在建立engine以及定义表格的基础上，可以生成表格

### create table----------------------------------------------
Base.metadata.create_all(engine)
##-------------------------------------------------------------

 

生成session(需要engine) (session用于插入，查询等)

### create session
Session=sessionmaker(bind=engine)
session=Session()

 

批量插入

## insert new data to table
a=[1,2,3,4,5,6]
b=[6,7,8,9,0,1]
hehe_list=[hehe(a=str(a[i]),b=str(b[i])) for i in range(6)]
session.add_all(hehe_list)
session.commit()

 

单行插入

e_hehe=hehe(a='5',b='6')
session.add(e_hehe)
session.commit()

 

使用session.query进行查询的一些方法

#-------------------------------------------------------------

our_hehe=session.query(hehe).filter_by(a='1').all()[0]

#-------------------------------------------------------------

for instance in session.query(hehe).order_by(hehe.a):
    print(instance.a,instance.b)
#-------------------------------------------------------------
for a,b in session.query(hehe.a,hehe.b):
    print(a,b)
#-------------------------------------------------------------
for line in session.query(hehe.a,hehe.b).all():
    print(line.a,line.b)
#-------------------------------------------------------------
from sqlalchemy.orm import aliased
hehe_alias=aliased(hehe,name='hehe_alias')
for row in session.query(hehe_alias,hehe_alias.a).all():
    print(row.hehe_alias)
##------------------------------------------------------------

 

query查询中使用过滤器(filter的一些方法) (即session.query.filter(……))

### Common Filter Operators------------------------------------
#equals:
# query.filter(User.name == 'ed')
#------------------------------------
# not equals:
# query.filter(User.name != 'ed')
#------------------------------------
# LIKE:
# query.filter(User.name.like('%ed%'))
#------------------------------------
# IN:
# query.filter(User.name.in_(['ed', 'wendy', 'jack']))
#------------------------------------
# NOT IN:
# query.filter(~User.name.in_(['ed', 'wendy', 'jack']))
#------------------------------------
# IS NULL:
# query.filter(User.name == None)
#------------------------------------

 

使用textual sql进行选择，允许用于自定义查询语句

res=session.query(hehe).from_statement(text("select * from hehe")).all()

 

删除行记录

x=session.query(hehe).filter(hehe.a=='1').one()

session.delete(x)

 

也可以是 

session.delete(session.query(hehe).filter(hehe.a=='1').one())

 

最后，别忘了把session关闭

session.close()


链接：http://blog.csdn.net/u014595019/article/details/49913437

####################################################################################################
python之sqlalchemy创建表的实例详解

通过sqlalchemy创建表需要三要素：引擎，基类，元素

from sqlalchemy import create_engine 
from sqlalchemy.ext.declarative import declarative_base 
from sqlalchemy import Column,Integer,String

引擎：也就是实体数据库连接

	
engine = create_engine('mysql+pymysql://godme:godme@localhost/godme',encoding='utf-8',echo=True)

传入参数：数据库类型+连接库+用户名+密码+主机，字符编码，是否打印建表细节

基类：

	
Base = declarative_base()

元素：

class User(Base): 
  __tablename__ = 'user'
  id = Column(Integer,primary_key=True) 
  name = Column(String(32)) 
  password = Column(String(64)) 

通过基本元素：

__tablename__：指定表名
Column：行声明，可指定主键
Integer：数据类型
String：数据类型，可指定长度

创建：

Base.metadata.create_all(engine)

基本过程：

1. 获取实体数据库连接
2. 创建类，继承基类，用基本类型描述数据库结构
3. 基类调用类结构，根据描述在引擎上创建数据表
链接：http://blog.csdn.net/wait_for_eva/article/details/78166156
