python之 break语句和continue语句及PASS语句

一般说来，break和continue语句的作用是改变控制流程。当break语句在循环结构中执行时，它会导致立即跳出循环结构，转而执行该结构后面的语句。比如，我们依次输出字符串“hello”中的各个字符，遇到第一个字符“l”时结束，我们以交互方式演示：

>>># 用break语句跳出循环结构

    for char in "hello":

       if char == "l":

           break

       print char

h

e

>>>





与break语句不同，当continue语句在循环结构中执行时，并不会退出循环结构，而是立即结束本次循环，重新开始下一轮循环，也就是说，跳 过循环体中在continue语句之后的所有语句，继续下一轮循环。对于while语句，执行continue语句后会立即检测循环条件；对于for语 句，执行continue语句后并没有立即检测循环条件，而是先将“可遍历的表达式”中的下一个元素赋给控制变量，然后再检测循环条件。比如，我们这次还 是依次输出字符串“hello”中的各个字符，但忽略字符串中的字符“l”，我们以交互方式演示：




 >>>#continue语句将结束本轮循环，进入下一轮循环
    for char in "hello":

        if char == "l":
                continue
        print char
h
e
o
>>>
    循环体可以包含一个语句，也可以包含多个语句，但是却不可以没有任何语句。那么，如果我们只是想让程序循环一定次数，但是循环过程什么也不做的话， 那该怎么办呢？当然是有办法的，因为Python为我们提供了一个pass语句，该语句什么也不做，也就是说它是一个空操作，所以，下列代码是合法的：
for x in range(10):
pass
实际上，该语句的确会循环十次，但是除了循环本身之外，它什么也没做。
