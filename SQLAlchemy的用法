Python操作MySQL -即pymysql/SQLAlchemy用法

踩坑记录：

用sqlalchemy读取mydql数据库中的内容，如果表中的某个字段内容过多用fetchall 取数据的话，不会报错，
显示程序一直在运行但无返回值，原因貌似是因为fetchall会把所有内容读到内存，解决方法：用SSCursor游标且不要用
fetchall，直接用for循环遍历，有空研究下SSCursor。。。


from sqlalchemy import create_engine
import pymysql

                    *此处必须用pymysql，不能用mysqlconnector
mysql_uri = 'mysql+pymysql://tech:xxxxxxxxxxx@101.125.563.238:3306/itjuzi?charset=utf8'
engine = create_engine(mysql_uri, connect_args={'cursorclass': pymysql.cursors.SSCursor})
# DB_Session = sessionmaker(bind=engine)
# session = DB_Session()
# sql = 'select url,html from xjf_company where id=3'
sql = 'select url,html from company'
cur = engine.execute(sql)
for a in cur:
    print(a)


这几篇博客可以对照看：
http://www.ttlsa.com/python/sqlalchemy-concise-guide/
http://www.codeweblog.com/%E5%B8%B8%E8%A7%81%E7%9A%84sqlalchemy%E5%88%97%E7%B1%BB%E5%9E%8B-%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9%E5%92%8C%E5%85%B3%E7%B3%BB%E9%80%89%E9%A1%B9/



本节介绍Python对于MySQL的一些操作用法

模块1：pymysql（等同于MySQLdb）

说明：pymysql与MySQLdb模块的使用基本相同，学会pymysql，使用MySQLdb也就不是问题

安装API

pip install PyMySQL
操作

 create table t1(nid int,name char(20));



复制代码
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# auth : pangguoping
import pymysql

# 创建连接
conn = pymysql.connect(host='192.168.1.103', port=3306, user='root', passwd='123456', db='test')
# 开启自动提交SQL，如果这里不设置，以后的命令需要执行conn.commit()来提交执行，否则都在内存中
conn.autocommit(True)

# 创建游标
cur = conn.cursor()

# 执行普通SQL，并返回受影响行数
effect_row = cur.execute("insert into t1 values (1, 'Boss')")
print(effect_row)  # out：1
#
# 执行带占位符的SQL，并返回受影响行数
effect_row = cur.execute("insert into t1 values (2,'%s')" % "xiaodi")
print(effect_row)  # out：1
#
# 执行多行数据的SQL，并返回受影响行数
effect_row = cur.executemany("insert into t1(id,name) values (%s, %s)", [(3, 'zhubajie'), (4, 'sunwukong')])
print(effect_row)  # out: 2

# 获取最新自增ID，注意：如果该表的列是非自增类型的，则获取到的数值为0
id = cur.lastrowid
print(id)  # out :4
cur.execute('select * from t1')

# 获取第一行数据
row_1 = cur.fetchone()
print(row_1)  # out:  (1, 'Boss')
# 获取前n行数据
row_2 = cur.fetchmany(3)
print(row_2)  # out: ((2, 'xiaodi'), (3, 'zhubajie'), (4, 'sunwukong'))
# 获取所有数据
row_3 = cur.fetchall()
print(row_3)  # out: ((1, 'Boss'), (2, 'xiaodi'), (3, 'zhubajie'), (4, 'sunwukong'))
# 提交
conn.commit()

# 关闭游标
cur.close()
# 关闭连接
conn.close()
复制代码
 

    注：在fetch数据时按照顺序进行，可以使用cursor.scroll(num,mode)来移动游标位置，如：

    cur.scroll(1,mode='relative') # 相对当前位置移动，数字1 也可以为负数，只是移动方向不同而已
    cur.scroll(2,mode='absolute') # 相对绝对位置移动
扩展：通过pymysql获取Dict数据类型

　　从上边的案例可以看出，pymysql获取的结果，是以元组的形式输出，对于不了解表结构的人来说，无疑不知道每个元素对应的列。

　　因此，如果想要或者字典类型的数据，需要创建游标的时候，设置返回的数据集类型，即：

# 游标设置为字典类型
cur = conn.cursor(cursor=pymysql.cursors.DictCursor)
 

模块2：Python MySQL ORM框架--> SQLAlchemy

SQLAlchemy是Python编程语言下的一款ORM框架，该框架建立在数据库API之上，使用关系对象映射进行数据库操作，简言之便是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。



说明：

　　SQLAchemy 本身无法操作数据库，其本质上是依赖pymysql.MySQLdb,mssql等第三方插件。
　　Dialect用于和数据库API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作。
安装API

pip3 install SQLAlchemy
SQLAlchemy本身无法操作数据库，其必须以来pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作.

复制代码
MySQL-Python
    mysql+mysqldb://<user>:<password>@<host>[:<port>]/<dbname>
  
pymysql
    mysql+pymysql://<username>:<password>@<host>/<dbname>[?<options>]
  
MySQL-Connector
    mysql+mysqlconnector://<user>:<password>@<host>[:<port>]/<dbname>
  
cx_Oracle
    oracle+cx_oracle://user:pass@host:port/dbname[?key=value&key=value...]
  
更多详见：http://docs.sqlalchemy.org/en/latest/dialects/index.html
复制代码
底层处理

使用 Engine/ConnectionPooling/Dialect 进行数据库操作，Engine使用ConnectionPooling连接数据库，然后再通过Dialect执行SQL语句。

复制代码
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# auth : pangguoping
from sqlalchemy import create_engine

engine = create_engine("mysql+pymysql://root:123@127.0.0.1:3306/t1", max_overflow=5)

# 执行SQL
# cur = engine.execute(
#     "INSERT INTO hosts (host, color_id) VALUES ('1.1.1.22', 3)"
# )

# 新插入行自增ID
# cur.lastrowid

# 执行SQL
# cur = engine.execute(
#     "INSERT INTO hosts (host, color_id) VALUES(%s, %s)",[('1.1.1.22', 3),('1.1.1.221', 3),]
# )


# 执行SQL
# cur = engine.execute(
#     "INSERT INTO hosts (host, color_id) VALUES (%(host)s, %(color_id)s)",
#     host='1.1.1.99', color_id=3
# )

# 执行SQL
# cur = engine.execute('select * from hosts')
# 获取第一行数据
# cur.fetchone()
# 获取第n行数据
# cur.fetchmany(3)
# 获取所有数据
# cur.fetchall()
复制代码
说白了就是使用pymysql的方法一样.

ORM功能使用

创建表

复制代码
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# auth : pangguoping
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, ForeignKey, UniqueConstraint, Index
from sqlalchemy.orm import sessionmaker, relationship
from sqlalchemy import create_engine

engine = create_engine("mysql+pymysql://root:7ujm8ik@192.168.1.103:3306/testsql", max_overflow=5)

Base = declarative_base()

# 创建单表
class Users(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String(32))
    extra = Column(String(16))

    __table_args__ = (
    UniqueConstraint('id', 'name', name='uix_id_name'),
        Index('ix_id_name', 'name', 'extra'),
    )

# 一对多
class Favor(Base):
    __tablename__ = 'favor'
    nid = Column(Integer, primary_key=True)
    caption = Column(String(50), default='red', unique=True)


class Person(Base):
    __tablename__ = 'person'
    nid = Column(Integer, primary_key=True)
    name = Column(String(32), index=True, nullable=True)
    favor_id = Column(Integer, ForeignKey("favor.nid"))

# 多对多
class ServerToGroup(Base):
    __tablename__ = 'servertogroup'
    nid = Column(Integer, primary_key=True, autoincrement=True)
    server_id = Column(Integer, ForeignKey('server.id'))
    group_id = Column(Integer, ForeignKey('group.id'))

class Group(Base):
    __tablename__ = 'group'
    id = Column(Integer, primary_key=True)
    name = Column(String(64), unique=True, nullable=False)


class Server(Base):
    __tablename__ = 'server'

    id = Column(Integer, primary_key=True, autoincrement=True)
    hostname = Column(String(64), unique=True, nullable=False)
    port = Column(Integer, default=22)

#定义初始化数据库函数
def init_db():
    Base.metadata.create_all(engine)

#顶固删除数据库函数
def drop_db():
    Base.metadata.drop_all(engine)

# drop_db()
init_db()
复制代码
操作表

要想操作表，需要经过如下2个步骤

步骤1：创建session

Session = sessionmaker(bind=engine)
session = Session()
步骤2：执行SQL。这里需要注意，如果是新增的话，需要新建对象，如下

复制代码
# 新增单条数据
obj = Users(name="guanyu", extra='hanjiang')
session.add(obj)
# 新增多条数据
session.add_all([
    Users(name="liubei", extra='leader'),
    Users(name="zhangfei", extra='xiaodi'),
])
session.commit()
复制代码
其他的SQL，仅需要执行session.query方法，进行相关操作即可

 

操作后我们会发现,class定义的为首字母大写,写入表以后为全部小写的模式.

复制代码
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# auth : pangguoping
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, ForeignKey, UniqueConstraint, Index
from sqlalchemy.orm import sessionmaker, relationship
from sqlalchemy import create_engine

engine = create_engine("mysql+pymysql://root:123@192.168.1.103:3306/test", max_overflow=5)

Base = declarative_base()

# 创建单表
class Users(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String(32))
    extra = Column(String(16))

    __table_args__ = (
    UniqueConstraint('id', 'name', name='uix_id_name'),
        Index('ix_id_name', 'name', 'extra'),
    )

# 一对多
class Favor(Base):
    __tablename__ = 'favor'
    nid = Column(Integer, primary_key=True)
    caption = Column(String(50), default='red', unique=True)


class Person(Base):
    __tablename__ = 'person'
    nid = Column(Integer, primary_key=True)
    name = Column(String(32), index=True, nullable=True)
    favor_id = Column(Integer, ForeignKey("favor.nid"))

# 多对多
class ServerToGroup(Base):
    __tablename__ = 'servertogroup'
    nid = Column(Integer, primary_key=True, autoincrement=True)
    server_id = Column(Integer, ForeignKey('server.id'))
    group_id = Column(Integer, ForeignKey('group.id'))

class Group(Base):
    __tablename__ = 'group'
    id = Column(Integer, primary_key=True)
    name = Column(String(64), unique=True, nullable=False)


class Server(Base):
    __tablename__ = 'server'

    id = Column(Integer, primary_key=True, autoincrement=True)
    hostname = Column(String(64), unique=True, nullable=False)
    port = Column(Integer, default=22)

#定义初始化数据库函数
def init_db():
    Base.metadata.create_all(engine)

#顶固删除数据库函数
def drop_db():
    Base.metadata.drop_all(engine)

# drop_db()
# init_db()

#创建mysql操作对象
Session = sessionmaker(bind=engine)
session = Session()
复制代码
 

增：

add:增加一个
add_all:增加多个

复制代码
Session = sessionmaker(bind=engine)
session = Session()

obj = Users(name='alex',extra='sb')
session.add(obj)
#add_all 列表形式
session.add_all([
    Users(name='cc',extra='cow'),
    Users(name='dd',extra='cowcow')
])
#提交
session.commit()
复制代码
 

删除表数据

# 删除user表中id大于2的条目
session.query(Users).filter(Users.id > 2).delete()
session.commit()
修改表数据

复制代码
# 更新user表中id大于2的name列为099
session.query(Users).filter(Users.id > 2).update({"name" : "099"})
# 更新user表中id大于2的name列，在原字符串后边增加099
session.query(Users).filter(Users.id > 2).update({Users.name: Users.name + "099"}, synchronize_session=False)
# 更新user表中id大于2的num列，使最终值在原来数值基础上加1
session.query(Users).filter(Users.id > 2).update({"num": Users.num + 1}, synchronize_session="evaluate") # 数字相加，必须设置synchronize_session="evaluate"
session.commit()
复制代码
查询数据

复制代码
ret = session.query(Users).all() # 查询所有
sql = session.query(Users) # 查询生成的sql
print(sql)
ret = session.query(Users.name, Users.extra).all() #查询User表的name和extra列的所有数据
ret = session.query(Users).filter_by(name='alex').all()  # 取全部name列为alex的数据
ret = session.query(Users).filter_by(name='alex').first() # 第一个匹配name列为alex的数据
 
ret是一个对象列表。这个对象可以通过 “对象[索引].字段”来获取对应的值
复制代码
其他操作

复制代码
#　条件
ret = session.query(Users).filter_by(name='alex').all() #
ret = session.query(Users).filter(Users.id > 1, Users.name == 'eric').all() # 且的关系
ret = session.query(Users).filter(Users.id.between(1, 3), Users.name == 'eric').all()
ret = session.query(Users).filter(Users.id.in_([1,3,4])).all()
ret = session.query(Users).filter(~Users.id.in_([1,3,4])).all() # ~表示非。就是not in的意思
ret = session.query(Users).filter(Users.id.in_(session.query(Users.id).filter_by(name='eric'))).all() # 联表查询
from sqlalchemy import and_, or_   # 且和or的关系
ret = session.query(Users).filter(and_(Users.id > 3, Users.name == 'eric')).all() # 条件以and方式排列
ret = session.query(Users).filter(or_(Users.id < 2, Users.name == 'eric')).all() # 条件以or方式排列
ret = session.query(Users).filter(
    or_( #这部分表示括号中的条件都以or的形式匹配
        Users.id < 2, # 或者 or User.id < 2
        and_(Users.name == 'eric', Users.id > 3),# 表示括号中这部分进行and匹配
        Users.extra != ""
    )).all()
 
 
# 通配符
ret = session.query(Users).filter(Users.name.like('e%')).all()
ret = session.query(Users).filter(~Users.name.like('e%')).all() # 表示not like
 
# 限制 limit用法
ret = session.query(Users)[1:2] # 等于limit ，具体功能需要自己测试
 
# 排序
ret = session.query(Users).order_by(Users.name.desc()).all()
ret = session.query(Users).order_by(Users.name.desc(), Users.id.asc()).all() # 按照name从大到小排列，如果name相同，按照id从小到大排列
 
# 分组
from sqlalchemy.sql import func
 
ret = session.query(Users).group_by(Users.extra).all()
ret = session.query(
    func.max(Users.id),
    func.sum(Users.id),
    func.min(Users.id)).group_by(Users.name).all()
 
ret = session.query(
    func.max(Users.id),
    func.sum(Users.id),
    func.min(Users.id)).group_by(Users.name).having(func.min(Users.id) >2).all() # having对聚合的内容再次进行过滤
 
# 连表
 
ret = session.query(Users, Favor).filter(Users.id == Favor.nid).all()
 
ret = session.query(Person).join(Favor).all()
# 默认是inner join
ret = session.query(Person).join(Favor, isouter=True).all() # isouter表示是left join
 
# 组合
q1 = session.query(Users.name).filter(Users.id > 2)
q2 = session.query(Favor.caption).filter(Favor.nid < 2)
ret = q1.union(q2).all() #union默认会去重
 
q1 = session.query(Users.name).filter(Users.id > 2)
q2 = session.query(Favor.caption).filter(Favor.nid < 2)
ret = q1.union_all(q2).all() # union_all不去重



原文链接：https://www.cnblogs.com/pangguoping/p/5720322.html
