python3 文件读写        #http://www.cnblogs.com/xp1005/p/6306861.html
open                                                                            #robots.txt机器人协议

f = open('filename','r') # 读模式
f = open('filename','w') # 写模式
f = open('filename','a') # 追加模式

注：rb 是以二进制读取
现在你觉得没用对吧，我也这么觉得。。。
but
在以后用到socket的时候，传输文件，读取和写入用的都是二进制形式
rb和wb可以更快速的进行文件的传输
　　

读取内容方式

f.read() # 一次读取整个文件，文件大不适用
f.readline() # 一次只读取一行，占内存小，速度慢
f.readlines() # 一次性读取，将内容分析成一个行的列表，可以由for...in...处理
写文件方式

f.write(content) # 不会换行哦
f.writeline(content) # 下次会写在下一行
close

f.close()
示例：

f = open('cdays-4-test.txt', 'r')                   #以读方式打开文件
result = list()
for line in f.readlines():                              #依次读取每行
    line = line.strip()                                    #去掉每行头尾空白
    if not len(line) or line.startswith('#'):       #判断是否是空行或注释行
        continue                                            #是的话，跳过不处理
    result.append(line)                                #保存
result.sort()                                               #排序结果
f.close()　　　　　　　　　　　　　　　    　 #关闭文件
with open('new_file.txt','w') as fw:            #with方式不需要再进行close
　　fw.write('%s' % '\n'.join(result)) 　　　　#保存入结果文件

#####################################################################################################################################

python读文件的三个方法read()、readline()、readlines()详解       #http://blog.csdn.net/u010039733/article/details/47858189
"""
1、读取文件的三个方法：read()、readline()、readlines()
2、三个方法均可接受一个变量用以限制每次读取的数据量，通常不使用该变量。
"""

"""
关于read()方法：
1、读取整个文件，将文件内容放到一个字符串变量中
2、如果文件大于可用内存，不可能使用这种处理
"""
file_object = open("test.py",'r') #创建一个文件对象，也是一个可迭代对象
try:
    all_the_text = file_object.read()  #结果为str类型
    print(type(all_the_text))
    print (all_the_text)
finally:
    file_object.close()

"""
关于readline()方法：
1、readline()每次读取一行，比readlines()慢得多
2、readline()返回的是一个字符串对象，保存当前行的内容
"""
file_object1 = open("test.py",'r')
try:
  while True:
      line = file_object1.readline()
      if line:
          print (line)
      else:
          break
finally:
    file_object1.close()

"""
关于readlines()方法：
1、一次性读取整个文件。
2、自动将文件内容分析成一个行的列表。
"""
file_object2 = open("test.py",'r')
try:
  lines = file_object2.readlines()
  print (type(lines))       #type(lines)= <type 'list'>
  for line in lines:
      print (line)
finally:
    file_object2.close()

#####################################################################################################################################
#将list 写入txt文件：            此方法每次回覆盖更新所得的文本
list = [['aaa','bbb','xxxx'],['a585','jyjb','xrtx'],['7878','47','4848']]
file = open('f:/spider_data/text.txt','w')
for i in list:                                                               #strip() 方法用于移除字符串头尾指定的字符（默认为空格）。
    i = str(i).strip('[').strip(']').replace("'","").replace(' ','')        #最后一个replace是讲输出结果中多余的空格替换掉，使文本紧密排列
    print(i)
    file.write(i+'\n')
file.close()

# 语法
# replace()方法语法：
# str.replace(old, new[, max])
# 参数
# old -- 将被替换的子字符串。
# new -- 新字符串，用于替换old子字符串。
# max -- 可选字符串, 替换不超过 max 次
# 返回值
# 返回字符串中的 old（旧字符串） 替换成 new(新字符串)后生成的新字符串，如果指定第三个参数max，则替换不超过 max 次。





import codecs
def write_txt(txt, path):
    f = codecs.open(path, 'w', 'utf8')
    f.write(str(txt).strip('{').strip('}').replace("'",'').replace(" ",''))       #txt为字典处理方法
    # f.write(str(txt).strip('[').strip(']').replace("'",'').replace(' ',''))      #txt为列表处理方法
    f.close()
path = r'F:/spider_data/lalala.txt'                #字符串加r前缀表示的是raw字符串，即r''单引号里的某些特殊字符就不必转义了
txt = {'s':'dsf','d':'56','6':'ewqre'}
# txt = ['sdf','sdf','26','wew']
write_txt(txt,path)

# txt为需要写入的数据，可以为列表或者字典之类
# 传入的path需如下定义：path= r’ D:\text.txt’
# f = codecs.open(path, 'a', 'utf8')中，codecs为包，需要用impor引入，’a’表示追加写入txt，可以换成’w’，表示覆盖写入。



##########################################################################################################################
链接：http://blog.csdn.net/AlanConstantineLau/article/details/68952414?locationNum=1&fps=1
创建文件夹：
import os
import shutil

def buildfile(echkeyfile):
if os.path.exists(echkeyfile):
        #创建前先判断是否存在文件夹，if存在则删除
        shutil.rmtree(echkeyfile)
        os.makedirs(echkeyfile)
    else:
        os.makedirs(echkeyfile)#else则创建语句
return echkeyfile#返回创建路径
#传入的参数是需要创建文件夹的路径，比如我想在D盘下创建一个名字为newfile的文件夹，则传入参数为r’ D:\newfile’。同样，返回的参数也是r’ D:\newfile’


写入文本1：

import codecs
def writetxt(path, content, code):
    with codecs.open(path, 'a', encoding=code)as f:
        f.write(content)
    return path+' is ok!'


读取txt：
def read_txt(path):
    with open(path, 'r', encoding='utf8') as f:
        lines = f.readlines()
    return lines
# 表示按行读取txt文件,utf8表示读取编码为utf8的文件，可以根据需求改成utf16，或者GBK等。
# 返回的为数组，每一个数组的元素代表一行，若想返回字符串格式，可以将改写成return ‘\n’.join(lines)
 
读取Excel文件：
import xlrd
def read_xls(path):
    xl = xlrd.open_workbook(path)
    sheet = xl.sheets()[0] # 0表示读取第一个工作表sheet
    data = []
    for i in range(0, sheet.ncols): # ncols表示按列读取
        data.append(list(sheet.col_values(i)))
    return data
# xlrd为第三方包，可以通过用pip下载，具体操作：打开运行，输入cmd→在cmd中输入pip install xlrd，enter →等待安装完成即可。在后续若存在需要使用的第三方包，都可以通过这种方式下载和安装。
# 传入参数为path，path为excel所在路径。
# 传入的path需如下定义：path= r’ D:\excel.xlsx’或path= r’ D:\excel.xls’
# col_values(i)表示按照一列中的所有单元格遍历读取
# 可以根据需求，把col替换成row，则表示按行读取
# return data ：返回的data是一个二维数组，根据col和row，传回的数据呈现形式也不同，即row是col的转置。
 
遍历文件夹：
def file_walker(path):
    fileArray = []
    for root, dirs, files in os.walk(path):
        for fn in files:
        eachpath = str(root+'\\'+fn)
        fileArray.append(eachpath)
    return fileArray
# 传入参数为path，path为需要遍历的文件夹路径。
# return fileArray 返回的是当前文件下所有文件的绝对路径



####################################################################################################################################

PYTHON将list或/dict对象写入txt/json文件

不能直接将list或dict对象进行写入，会出现typeError。
一、写list到txt文件：
ipTable = ['158.59.194.213', '18.9.14.13', '58.59.14.21']
fileObject = open('sampleList.txt', 'w')
for ip in ipTable:
	fileObject.write(ip)
	fileObject.write('\n')
fileObject.close()

二、写dict对象到json文件
需要import json，将dict转为字符串后写入json文件
dictObj = {
	'andy':{
		'age': 23,
		'city': 'shanghai',
		'skill': 'python'
	},
	'william': {
		'age': 33,
		'city': 'hangzhou',
		'skill': 'js'
	}
}

jsObj = json.dumps(dictObj)

fileObject = open('jsonFile.json', 'w')
fileObject.write(jsObj)
fileObject.close()


################################################################################################################################
获取的字典格式的数据保存为txt文件的方法
file = open('F:/spider_data/ip.txt', 'a')
for key,value in finallyip.items():
    file.write(key+':'+value)
    file.write('\n')
file.close()


Python 字典(Dictionary) items()方法
描述
Python 字典(Dictionary) items() 函数以列表返回可遍历的(键, 值) 元组数组。
语法
items()方法语法：
dict.items()
参数
NA。
返回值
返回可遍历的(键, 值) 元组数组。
实例
以下实例展示了 items()函数的使用方法：
实例(Python 2.0+)
#!/usr/bin/python
# coding=utf-8

dict = {'Google': 'www.google.com', 'Runoob': 'www.runoob.com', 'taobao': 'www.taobao.com'}

print "字典值 : %s" %  dict.items()

# 遍历字典列表
for key,values in  dict.items():
    print key,values
以上实例输出结果为：
字典值 : [('Google', 'www.google.com'), ('taobao', 'www.taobao.com'), ('Runoob', 'www.runoob.com')]
Google www.google.com
taobao www.taobao.com
Runoob www.runoob.com
